{"version":3,"sources":["logo.svg","component/table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Table","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","results","orderBy","orderAsc","setTimeout","datas","setState","sortBy","bind","assertThisInitialized","inherits","createClass","key","value","a","b","idx","e","_this$state$results","console","log","id","currentTarget","currentPage","sort","compareBy","_this2","_this$props","columns","react_default","createElement","map","column","prop","onClick","label","data","i","hasOwnProperty","render","Component","App","times","adult","class","axios","get","then","res","_this$state","undefined","className","src","logo","alt","href","target","rel","table","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2SC4FzBC,EA1Ff,SAAAC,GACG,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAClBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,GACTC,QAAS,EACTC,UAAU,GAEZC,WAAW,WACSX,EAAKD,MAAfa,MACRZ,EAAKa,SAAS,CACZL,QAASR,EAAKD,MAAMa,SAErB,KACHZ,EAAKc,OAASd,EAAKc,OAAOC,KAAZd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAbIA,EADtB,OAAAC,OAAAgB,EAAA,EAAAhB,CAAAJ,EAAAC,GAAAG,OAAAiB,EAAA,EAAAjB,CAAAJ,EAAA,EAAAsB,IAAA,YAAAC,MAAA,SAiBYD,GAER,OADqBhB,KAAKI,MAAlBG,SAEC,SAASW,EAAGC,GACjB,OAAID,EAAEF,GAAOG,EAAEH,IAAc,EACzBE,EAAEF,GAAOG,EAAEH,GAAa,EACrB,GAGF,SAASE,EAAGC,GACjB,OAAID,EAAEF,GAAOG,EAAEH,IAAc,EACzBE,EAAEF,GAAOG,EAAEH,GAAa,EACrB,KA7Bf,CAAAA,IAAA,cAAAC,MAAA,SAiCcG,GACVpB,KAAKU,SAAS,CACZJ,QAASc,EACTb,SACEP,KAAKI,MAAME,UAAYc,GAAOpB,KAAKI,MAAMG,SAAWP,KAAKI,MAAMG,aArCvE,CAAAS,IAAA,SAAAC,MAAA,SAwCSI,GAAG,IAAAC,EACiBtB,KAAKI,MAAtBC,eADA,IAAAiB,EACU,GADVA,EAERC,QAAQC,IAAInB,GACZ,IACMoB,EADSJ,EAAEK,cACCD,GAClBzB,KAAKU,SAAS,CACZiB,YAAa,EACbrB,QAASmB,EACTpB,QAASL,KAAKJ,MAAMa,MAAMmB,KAAK5B,KAAK6B,UAAUJ,IAC9ClB,UAAWP,KAAKI,MAAMG,aAjD5B,CAAAS,IAAA,SAAAC,MAAA,WAoDW,IAAAa,EAAA9B,KAAA+B,GACa/B,KAAKI,MAAjBC,QACmBL,KAAKJ,OAAxBoC,EAFDD,EAECC,QAASvB,EAFVsB,EAEUtB,MACjB,OACEwB,EAAAf,EAAAgB,cAAA,aACED,EAAAf,EAAAgB,cAAA,aACED,EAAAf,EAAAgB,cAAA,UACGF,EAAQG,IAAI,SAACC,EAAQhB,GACpB,OACEa,EAAAf,EAAAgB,cAAA,MAAIT,GAAIW,EAAOC,KAAMC,QAASR,EAAKnB,QAChCyB,EAAOG,WAMlBN,EAAAf,EAAAgB,cAAA,aACGzB,EAAM0B,IAAI,SAACK,EAAMpB,GAChB,OACEa,EAAAf,EAAAgB,cAAA,UACGF,EAAQG,IAAI,SAACC,EAAQK,GACpB,OACER,EAAAf,EAAAgB,cAAA,UACGE,EAAOM,eAAe,UACnBN,EAAOO,OAAOH,GACdA,EAAKJ,EAAOC,kBA7EtC3C,EAAA,CAA2BkD,aCwEZC,qBAlEb,SAAAA,EAAYjD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6C,IACjBhD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+C,GAAA1C,KAAAH,KAAMJ,KACDQ,MAAQ,CACX0C,MAAO,GACPzC,QAAQ,GACR2B,QAAS,CACP,CACEO,MAAO,eACPF,KAAM,gBAER,CACEE,MAAO,qBACPF,KAAM,SAER,CACEE,MAAO,QACPF,KAAM,GACNM,OAAQ,SAASH,GACf,OAAsB,IAAfA,EAAKO,MACVd,EAAAf,EAAAgB,cAAA,kCAEAD,EAAAf,EAAAgB,cAAA,QAAMc,MAAM,YAAZ,0BArBOnD,mFA4BC,IAAAiC,EAAA9B,KAClBiD,IAAMC,IACF,8GACAC,KAAK,SAAAC,GACL7B,QAAQC,IAAI4B,GACZtB,EAAKpB,SAAS,CACZL,QAAS+C,EAAIZ,KAAKnC,6CAIjB,IAAAgD,EAC+BrD,KAAKI,MAAjC4B,EADHqB,EACGrB,QAAS3B,EADZgD,EACYhD,QADZgD,EACqBP,MAC5B,YAAgBQ,IAAZjD,GAEF4B,EAAAf,EAAAgB,cAAA,OAAKqB,UAAU,OACbtB,EAAAf,EAAAgB,cAAA,UAAQqB,UAAU,cAChBtB,EAAAf,EAAAgB,cAAA,OAAKsB,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCzB,EAAAf,EAAAgB,cAAA,iBACOD,EAAAf,EAAAgB,cAAA,0BADP,wBAGAD,EAAAf,EAAAgB,cAAA,KACEqB,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASD5B,EAAAf,EAAAgB,cAAA,OAAKc,MAAM,aACXf,EAAAf,EAAAgB,cAAA,gCACAD,EAAAf,EAAAgB,cAAC4B,EAAD,CAAgB9B,QAASA,EAASvB,MAAOJ,aA5DhCuC,cCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASzB,OAAOV,EAAAf,EAAAgB,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.4d76abd5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react'\r\n\r\nexport class Table extends Component {\r\n   constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      results: [],\r\n      orderBy: 0,\r\n      orderAsc: false\r\n    };\r\n    setTimeout(() => {\r\n      const { datas } = this.props;\r\n      this.setState({\r\n        results: this.props.datas\r\n      });\r\n    }, 1000);\r\n    this.sortBy = this.sortBy.bind(this);\r\n  }\r\n  // sort\r\n  compareBy(key) {\r\n    const { orderAsc } = this.state;\r\n    if (orderAsc) {\r\n      return function(a, b) {\r\n        if (a[key] < b[key]) return -1;\r\n        if (a[key] > b[key]) return 1;\r\n        return 0;\r\n      };\r\n    } else {\r\n      return function(a, b) {\r\n        if (a[key] > b[key]) return -1;\r\n        if (a[key] < b[key]) return 1;\r\n        return 0;\r\n      };\r\n    }\r\n  }\r\n  handleClick(idx) {\r\n    this.setState({\r\n      orderBy: idx,\r\n      orderAsc:\r\n        this.state.orderBy === idx ? !this.state.orderAsc : this.state.orderAsc\r\n    });\r\n  }\r\n  sortBy(e) {\r\n    const { results = [] } = this.state;\r\n    console.log(results)\r\n    const target = e.currentTarget;\r\n    const id = target.id;\r\n    this.setState({\r\n      currentPage: 1,\r\n      orderBy: id,\r\n      results: this.props.datas.sort(this.compareBy(id)),\r\n      orderAsc: !this.state.orderAsc\r\n    });\r\n  }\r\n  render() {\r\n    const { results } = this.state;\r\n    const { columns, datas } = this.props;\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {columns.map((column, idx) => {\r\n              return (\r\n                <th id={column.prop} onClick={this.sortBy}>\r\n                  {column.label}\r\n                </th>\r\n              )\r\n            })}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {datas.map((data, idx) => {\r\n            return (\r\n              <tr>\r\n                {columns.map((column, i) => {\r\n                  return (\r\n                    <td>\r\n                      {column.hasOwnProperty(\"render\")\r\n                        ? column.render(data)\r\n                        : data[column.prop]}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table","import axios from 'axios'\r\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport TableComponent from './component/table'\r\nimport Aux from './utils/rAux'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      times: {},\r\n      results:[],\r\n      columns: [\r\n        {\r\n          label: \"時間\",\r\n          prop: \"release_date\"\r\n        },\r\n        {\r\n          label: \"標題二\",\r\n          prop: \"title\"\r\n        },\r\n        {\r\n          label: \"adult\",\r\n          prop: \"\",\r\n          render: function(data) {\r\n            return data.adult === false ? (\r\n              <span>普遍級</span>\r\n            ) : (\r\n              <span class=\"text-red\">限制級</span>\r\n            );\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    axios.get(\r\n        \"https://api.themoviedb.org/3/movie/upcoming?api_key=23785b1559bb39249c40d56934f80e6c&language=zh-TW&page=1\"\r\n      ).then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          results: res.data.results\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n      const { columns, results, times } = this.state;\r\n    if (results === undefined) return false;\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n         <div class=\"container\">\r\n         <h2>Table 組件</h2>\r\n         <TableComponent columns={columns} datas={results} />\r\n         </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}